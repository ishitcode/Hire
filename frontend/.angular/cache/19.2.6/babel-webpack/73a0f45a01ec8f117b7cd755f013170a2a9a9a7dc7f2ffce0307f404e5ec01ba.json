{"ast":null,"code":"import * as i0 from \"@angular/core\";\nexport let DataService = /*#__PURE__*/(() => {\n  class DataService {\n    sharedText = '';\n    interview = '';\n    job = '';\n    summary = '';\n    phoneNumber = '';\n    evaluationResults = null;\n    transcription = {\n      conversation: []\n    };\n    constructor() {}\n    // Method to update transcription\n    setTranscription(data) {\n      this.transcription = data;\n    }\n    // Method to clear transcription\n    clearTranscription() {\n      this.transcription = {\n        conversation: []\n      };\n    }\n    static ɵfac = function DataService_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || DataService)();\n    };\n    static ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: DataService,\n      factory: DataService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return DataService;\n})();","map":{"version":3,"names":["DataService","sharedText","interview","job","summary","phoneNumber","evaluationResults","transcription","conversation","constructor","setTranscription","data","clearTranscription","factory","ɵfac","providedIn"],"sources":["C:\\Users\\Hardik\\Desktop\\Monday Duplicate\\frontend\\src\\services\\data.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\n\r\nexport interface Message {\r\n    speaker: 'AI_HR' | 'Candidate';\r\n    text: string;\r\n}\r\n\r\nexport interface Transcription {\r\n    conversation: Message[];\r\n    error?: string;\r\n}\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class DataService {\r\n    public sharedText: string = '';\r\n    public interview: string = '';\r\n    public job: string = '';\r\n    public summary: string = '';\r\n    public phoneNumber: string = '';\r\n    public evaluationResults: any = null;\r\n    public transcription: Transcription = {\r\n        conversation: []\r\n    };\r\n\r\n    constructor() {}\r\n\r\n    // Method to update transcription\r\n    setTranscription(data: Transcription) {\r\n        this.transcription = data;\r\n    }\r\n\r\n    // Method to clear transcription\r\n    clearTranscription() {\r\n        this.transcription = {\r\n            conversation: []\r\n        };\r\n    }\r\n}\r\n"],"mappings":";AAaA,WAAaA,WAAW;EAAlB,MAAOA,WAAW;IACbC,UAAU,GAAW,EAAE;IACvBC,SAAS,GAAW,EAAE;IACtBC,GAAG,GAAW,EAAE;IAChBC,OAAO,GAAW,EAAE;IACpBC,WAAW,GAAW,EAAE;IACxBC,iBAAiB,GAAQ,IAAI;IAC7BC,aAAa,GAAkB;MAClCC,YAAY,EAAE;KACjB;IAEDC,YAAA,GAAe;IAEf;IACAC,gBAAgBA,CAACC,IAAmB;MAChC,IAAI,CAACJ,aAAa,GAAGI,IAAI;IAC7B;IAEA;IACAC,kBAAkBA,CAAA;MACd,IAAI,CAACL,aAAa,GAAG;QACjBC,YAAY,EAAE;OACjB;IACL;;uCAvBSR,WAAW;IAAA;;aAAXA,WAAW;MAAAa,OAAA,EAAXb,WAAW,CAAAc,IAAA;MAAAC,UAAA,EADE;IAAM;;SACnBf,WAAW;AAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}