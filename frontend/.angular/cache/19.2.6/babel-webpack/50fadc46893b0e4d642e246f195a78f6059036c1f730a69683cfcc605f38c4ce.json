{"ast":null,"code":"import { HttpClientModule } from '@angular/common/http';\nimport { interval } from 'rxjs';\nimport { takeWhile } from 'rxjs/operators';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule } from '@angular/router';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"../../services/data.service\";\nimport * as i3 from \"@angular/router\";\nimport * as i4 from \"@angular/common\";\nfunction AiInterviewComponent_div_11_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 8);\n    i0.ɵɵelement(1, \"div\", 9);\n    i0.ɵɵelementStart(2, \"p\");\n    i0.ɵɵtext(3, \"Initiating the call. Please wait...\");\n    i0.ɵɵelementEnd()();\n  }\n}\nfunction AiInterviewComponent_div_12_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 8);\n    i0.ɵɵelement(1, \"div\", 9);\n    i0.ɵɵelementStart(2, \"p\");\n    i0.ɵɵtext(3, \"Call in progress...\");\n    i0.ɵɵelementEnd()();\n  }\n}\nfunction AiInterviewComponent_div_13_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 13);\n    i0.ɵɵelement(1, \"div\", 9);\n    i0.ɵɵelementStart(2, \"p\");\n    i0.ɵɵtext(3, \"Downloading call recording...\");\n    i0.ɵɵelementEnd()();\n  }\n}\nfunction AiInterviewComponent_div_13_div_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 13);\n    i0.ɵɵelement(1, \"div\", 9);\n    i0.ɵɵelementStart(2, \"p\");\n    i0.ɵɵtext(3, \"Transcribing interview...\");\n    i0.ɵɵelementEnd()();\n  }\n}\nfunction AiInterviewComponent_div_13_div_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 13);\n    i0.ɵɵelement(1, \"div\", 9);\n    i0.ɵɵelementStart(2, \"p\");\n    i0.ɵɵtext(3, \"Evaluating interview responses...\");\n    i0.ɵɵelementEnd()();\n  }\n}\nfunction AiInterviewComponent_div_13_div_5_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r1 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 14)(1, \"p\");\n    i0.ɵɵtext(2, \"\\u2705 Interview processing complete!\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"button\", 15);\n    i0.ɵɵlistener(\"click\", function AiInterviewComponent_div_13_div_5_Template_button_click_3_listener() {\n      i0.ɵɵrestoreView(_r1);\n      const ctx_r1 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r1.viewResults());\n    });\n    i0.ɵɵtext(4, \"View Results\");\n    i0.ɵɵelementEnd()();\n  }\n}\nfunction AiInterviewComponent_div_13_div_6_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r3 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 16)(1, \"p\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"button\", 17);\n    i0.ɵɵlistener(\"click\", function AiInterviewComponent_div_13_div_6_Template_button_click_3_listener() {\n      i0.ɵɵrestoreView(_r3);\n      const ctx_r1 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r1.retryProcessing());\n    });\n    i0.ɵɵtext(4, \"Retry Processing\");\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(ctx_r1.errorMessage);\n  }\n}\nfunction AiInterviewComponent_div_13_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 8);\n    i0.ɵɵelementContainerStart(1, 5);\n    i0.ɵɵtemplate(2, AiInterviewComponent_div_13_div_2_Template, 4, 0, \"div\", 10)(3, AiInterviewComponent_div_13_div_3_Template, 4, 0, \"div\", 10)(4, AiInterviewComponent_div_13_div_4_Template, 4, 0, \"div\", 10)(5, AiInterviewComponent_div_13_div_5_Template, 5, 0, \"div\", 11)(6, AiInterviewComponent_div_13_div_6_Template, 5, 1, \"div\", 12);\n    i0.ɵɵelementContainerEnd();\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngSwitch\", ctx_r1.processingState);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngSwitchCase\", \"downloading\");\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngSwitchCase\", \"transcribing\");\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngSwitchCase\", \"evaluating\");\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngSwitchCase\", \"done\");\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngSwitchCase\", \"error\");\n  }\n}\nfunction AiInterviewComponent_div_14_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r4 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 18)(1, \"p\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"button\", 17);\n    i0.ɵɵlistener(\"click\", function AiInterviewComponent_div_14_Template_button_click_3_listener() {\n      i0.ɵɵrestoreView(_r4);\n      const ctx_r1 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r1.monitorCallStatus());\n    });\n    i0.ɵɵtext(4, \"Retry\");\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(ctx_r1.errorMessage);\n  }\n}\nexport let AiInterviewComponent = /*#__PURE__*/(() => {\n  class AiInterviewComponent {\n    http;\n    dataService;\n    router;\n    statusCheckSubscription;\n    callStatus = 'initiating';\n    processingState = '';\n    errorMessage = '';\n    maxRetries = 30; // 5 minutes maximum (10 second intervals)\n    retryCount = 0;\n    constructor(http, dataService, router) {\n      this.http = http;\n      this.dataService = dataService;\n      this.router = router;\n    }\n    ngOnInit() {\n      this.monitorCallStatus();\n    }\n    ngOnDestroy() {\n      if (this.statusCheckSubscription) {\n        this.statusCheckSubscription.unsubscribe();\n      }\n    }\n    monitorCallStatus() {\n      // Reset state when retrying\n      this.callStatus = 'initiating';\n      this.errorMessage = '';\n      this.retryCount = 0;\n      this.processingState = '';\n      if (this.statusCheckSubscription) {\n        this.statusCheckSubscription.unsubscribe();\n      }\n      // Immediately check status\n      this.checkCallStatus();\n      this.statusCheckSubscription = interval(5000) // Check every 5 seconds\n      .pipe(takeWhile(() => {\n        return this.retryCount < this.maxRetries && !['completed', 'failed'].includes(this.callStatus);\n      })).subscribe(() => {\n        this.checkCallStatus();\n      });\n    }\n    checkCallStatus() {\n      console.log('Checking call status...', this.retryCount);\n      this.http.get('http://localhost:4000/api/calls/status').subscribe(response => {\n        console.log('Status response:', response);\n        this.retryCount++;\n        if (response.status === 'completed') {\n          this.callStatus = 'completed';\n          if (this.statusCheckSubscription) {\n            this.statusCheckSubscription.unsubscribe();\n          }\n          this.processInterviewData();\n        } else if (response.status === 'failed') {\n          this.callStatus = 'failed';\n          this.errorMessage = response.error || 'Call failed to connect';\n          if (this.statusCheckSubscription) {\n            this.statusCheckSubscription.unsubscribe();\n          }\n        } else if (response.status === 'in_progress') {\n          this.callStatus = 'in_progress';\n        } else {\n          if (this.retryCount >= this.maxRetries) {\n            this.callStatus = 'failed';\n            this.errorMessage = 'Call initialization timed out. Please try again.';\n            if (this.statusCheckSubscription) {\n              this.statusCheckSubscription.unsubscribe();\n            }\n          }\n        }\n      }, error => {\n        console.error('Error checking call status:', error);\n        this.retryCount++;\n        if (this.retryCount >= this.maxRetries) {\n          this.callStatus = 'failed';\n          this.errorMessage = 'Failed to check call status. Please try again.';\n          if (this.statusCheckSubscription) {\n            this.statusCheckSubscription.unsubscribe();\n          }\n        }\n      });\n    }\n    processInterviewData() {\n      this.processingState = 'downloading';\n      console.log('Downloading call recording...');\n      this.http.get('http://localhost:4000/api/calls').subscribe(response => {\n        console.log(\"✅ Full server response:\", JSON.stringify(response, null, 2));\n        try {\n          if (!response) {\n            throw new Error('No response data received');\n          }\n          if (!response.structured_conversation) {\n            throw new Error('Missing structured_conversation in response');\n          }\n          const transcript = response.structured_conversation?.results?.channels?.[0]?.alternatives?.[0]?.transcript;\n          if (!transcript) {\n            throw new Error('No transcript found in response structure');\n          }\n          this.processingState = 'transcribing';\n          this.dataService.job = transcript;\n          this.evaluateInterview(this.dataService.job, this.dataService.summary);\n        } catch (error) {\n          console.error(\"❌ Error processing response:\", error.message);\n          console.error(\"Response structure:\", response);\n          this.processingState = 'error';\n          this.errorMessage = `Failed to process interview data: ${error.message}`;\n        }\n      }, error => {\n        console.error(\"❌ Error fetching interview data:\", error);\n        this.processingState = 'error';\n        this.errorMessage = `Failed to fetch interview data: ${error.message || 'Unknown error'}`;\n      });\n    }\n    evaluateInterview(conversation, summary) {\n      this.processingState = 'evaluating';\n      console.log('Evaluating interview...');\n      const conversationArray = conversation.split('\\n');\n      const jobData = {\n        conversation: conversationArray,\n        summary: summary\n      };\n      this.http.post('http://localhost:4000/api/finaleval', jobData).subscribe(response => {\n        console.log(\"✅ Final evaluation response:\", response);\n        this.processingState = 'done';\n        // Store evaluation results in the service for the results page\n        this.dataService.evaluationResults = response;\n      }, error => {\n        console.error(\"❌ Error evaluating interview:\", error);\n        this.processingState = 'error';\n        this.errorMessage = 'Failed to evaluate interview';\n      });\n    }\n    retryProcessing() {\n      this.processInterviewData();\n    }\n    viewResults() {\n      this.router.navigate(['/interview-results']);\n    }\n    static ɵfac = function AiInterviewComponent_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || AiInterviewComponent)(i0.ɵɵdirectiveInject(i1.HttpClient), i0.ɵɵdirectiveInject(i2.DataService), i0.ɵɵdirectiveInject(i3.Router));\n    };\n    static ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: AiInterviewComponent,\n      selectors: [[\"app-ai-interview\"]],\n      decls: 15,\n      vars: 7,\n      consts: [[1, \"interview-container\"], [1, \"interview-header\"], [1, \"question-number\"], [1, \"header-text\"], [1, \"question-section\"], [3, \"ngSwitch\"], [\"class\", \"status-message\", 4, \"ngSwitchCase\"], [\"class\", \"status-message error\", 4, \"ngSwitchCase\"], [1, \"status-message\"], [1, \"loading-spinner\"], [\"class\", \"processing-state\", 4, \"ngSwitchCase\"], [\"class\", \"processing-state success\", 4, \"ngSwitchCase\"], [\"class\", \"processing-state error\", 4, \"ngSwitchCase\"], [1, \"processing-state\"], [1, \"processing-state\", \"success\"], [1, \"view-results-button\", 3, \"click\"], [1, \"processing-state\", \"error\"], [1, \"retry-button\", 3, \"click\"], [1, \"status-message\", \"error\"]],\n      template: function AiInterviewComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"div\", 2);\n          i0.ɵɵtext(3, \"1\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(4, \"div\", 3)(5, \"h2\");\n          i0.ɵɵtext(6, \"AI Interview Session\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(7, \"p\");\n          i0.ɵɵtext(8, \"1/20 Questions\");\n          i0.ɵɵelementEnd()()();\n          i0.ɵɵelementStart(9, \"div\", 4);\n          i0.ɵɵelementContainerStart(10, 5);\n          i0.ɵɵtemplate(11, AiInterviewComponent_div_11_Template, 4, 0, \"div\", 6)(12, AiInterviewComponent_div_12_Template, 4, 0, \"div\", 6)(13, AiInterviewComponent_div_13_Template, 7, 6, \"div\", 6)(14, AiInterviewComponent_div_14_Template, 5, 1, \"div\", 7);\n          i0.ɵɵelementContainerEnd();\n          i0.ɵɵelementEnd()();\n        }\n        if (rf & 2) {\n          i0.ɵɵadvance(9);\n          i0.ɵɵclassProp(\"error\", ctx.callStatus === \"failed\");\n          i0.ɵɵadvance();\n          i0.ɵɵproperty(\"ngSwitch\", ctx.callStatus);\n          i0.ɵɵadvance();\n          i0.ɵɵproperty(\"ngSwitchCase\", \"initiating\");\n          i0.ɵɵadvance();\n          i0.ɵɵproperty(\"ngSwitchCase\", \"in_progress\");\n          i0.ɵɵadvance();\n          i0.ɵɵproperty(\"ngSwitchCase\", \"completed\");\n          i0.ɵɵadvance();\n          i0.ɵɵproperty(\"ngSwitchCase\", \"failed\");\n        }\n      },\n      dependencies: [CommonModule, i4.NgSwitch, i4.NgSwitchCase, HttpClientModule, RouterModule],\n      styles: [\".interview-container[_ngcontent-%COMP%] {\\n    margin: 100px auto;\\n    align-items: center;\\n    width: 100%;\\n    max-width: 800px;\\n    background-color: #151e33;\\n    border-radius: 12px;\\n    overflow: hidden;\\n    box-shadow: 0 10px 30px rgba(0, 0, 0, 0.2);\\n    margin-top: 85px;\\n}\\n\\n.interview-header[_ngcontent-%COMP%] {\\n    display: flex;\\n    align-items: center;\\n    padding: 20px;\\n    border-bottom: 1px solid #2c3e5a;\\n}\\n\\n.question-number[_ngcontent-%COMP%] {\\n    width: 48px;\\n    height: 48px;\\n    background-color: #2563eb;\\n    border-radius: 50%;\\n    display: flex;\\n    justify-content: center;\\n    align-items: center;\\n    font-weight: bold;\\n    margin-right: 15px;\\n}\\n\\n.header-text[_ngcontent-%COMP%]   h2[_ngcontent-%COMP%] {\\n    font-size: 18px;\\n    margin-bottom: 5px;\\n}\\n\\n.question-section[_ngcontent-%COMP%] {\\n    background-color: #1e2c4a;\\n    margin: 20px;\\n    padding: 15px;\\n    border-radius: 8px;\\n    min-height: 300px;\\n    display: flex;\\n    justify-content: center;\\n    align-items: center;\\n}\\n\\n.status-message[_ngcontent-%COMP%] {\\n    text-align: center;\\n    color: #fff;\\n}\\n\\n.loading-spinner[_ngcontent-%COMP%] {\\n    width: 40px;\\n    height: 40px;\\n    border: 4px solid #2563eb;\\n    border-top: 4px solid transparent;\\n    border-radius: 50%;\\n    margin: 0 auto 20px;\\n    animation: _ngcontent-%COMP%_spin 1s linear infinite;\\n}\\n\\n@keyframes _ngcontent-%COMP%_spin {\\n    0% { transform: rotate(0deg); }\\n    100% { transform: rotate(360deg); }\\n}\\n\\n.error[_ngcontent-%COMP%] {\\n    border: 1px solid #ef4444;\\n}\\n\\n.error[_ngcontent-%COMP%]   .status-message[_ngcontent-%COMP%] {\\n    color: #ef4444;\\n}\\n\\n.retry-button[_ngcontent-%COMP%], .view-results-button[_ngcontent-%COMP%] {\\n    margin-top: 15px;\\n    padding: 8px 20px;\\n    border: none;\\n    border-radius: 4px;\\n    cursor: pointer;\\n    transition: background-color 0.2s;\\n    font-weight: 500;\\n}\\n\\n.retry-button[_ngcontent-%COMP%] {\\n    background-color: #2563eb;\\n    color: white;\\n}\\n\\n.retry-button[_ngcontent-%COMP%]:hover {\\n    background-color: #1d4ed8;\\n}\\n\\n.view-results-button[_ngcontent-%COMP%] {\\n    background-color: #10b981;\\n    color: white;\\n}\\n\\n.view-results-button[_ngcontent-%COMP%]:hover {\\n    background-color: #059669;\\n}\\n\\n.processing-state[_ngcontent-%COMP%] {\\n    text-align: center;\\n}\\n\\n.processing-state[_ngcontent-%COMP%]   p[_ngcontent-%COMP%] {\\n    margin: 10px 0;\\n}\\n\\n.success[_ngcontent-%COMP%] {\\n    color: #10b981;\\n}\\n\\n.evaluation-container[_ngcontent-%COMP%] {\\n    display: grid;\\n    grid-template-columns: 1fr 1fr;\\n    gap: 20px;\\n    padding: 20px;\\n}\\n\\n.analysis-summary[_ngcontent-%COMP%], \\n.final-decision[_ngcontent-%COMP%] {\\n    background-color: #1e2c4a;\\n    border-radius: 8px;\\n    padding: 20px;\\n}\\n\\n.strengths[_ngcontent-%COMP%]   h4[_ngcontent-%COMP%], \\n.improvement-areas[_ngcontent-%COMP%]   h4[_ngcontent-%COMP%] {\\n    margin-bottom: 10px;\\n    color: #10b981;\\n}\\n\\n.improvement-areas[_ngcontent-%COMP%]   h4[_ngcontent-%COMP%] {\\n    color: #eab308;\\n}\\n\\n.decision-header[_ngcontent-%COMP%] {\\n    display: flex;\\n    justify-content: space-between;\\n    align-items: center;\\n    margin-bottom: 15px;\\n}\\n\\n.accepted-badge[_ngcontent-%COMP%] {\\n    color: #10b981;\\n    font-weight: bold;\\n}\\n\\n@media (max-width: 768px) {\\n    .evaluation-container[_ngcontent-%COMP%] {\\n        grid-template-columns: 1fr;\\n    }\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9wYWdlcy9haS1pbnRlcnZpZXcvYWktaW50ZXJ2aWV3LmNvbXBvbmVudC5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7SUFDSSxrQkFBa0I7SUFDbEIsbUJBQW1CO0lBQ25CLFdBQVc7SUFDWCxnQkFBZ0I7SUFDaEIseUJBQXlCO0lBQ3pCLG1CQUFtQjtJQUNuQixnQkFBZ0I7SUFDaEIsMENBQTBDO0lBQzFDLGdCQUFnQjtBQUNwQjs7QUFFQTtJQUNJLGFBQWE7SUFDYixtQkFBbUI7SUFDbkIsYUFBYTtJQUNiLGdDQUFnQztBQUNwQzs7QUFFQTtJQUNJLFdBQVc7SUFDWCxZQUFZO0lBQ1oseUJBQXlCO0lBQ3pCLGtCQUFrQjtJQUNsQixhQUFhO0lBQ2IsdUJBQXVCO0lBQ3ZCLG1CQUFtQjtJQUNuQixpQkFBaUI7SUFDakIsa0JBQWtCO0FBQ3RCOztBQUVBO0lBQ0ksZUFBZTtJQUNmLGtCQUFrQjtBQUN0Qjs7QUFFQTtJQUNJLHlCQUF5QjtJQUN6QixZQUFZO0lBQ1osYUFBYTtJQUNiLGtCQUFrQjtJQUNsQixpQkFBaUI7SUFDakIsYUFBYTtJQUNiLHVCQUF1QjtJQUN2QixtQkFBbUI7QUFDdkI7O0FBRUE7SUFDSSxrQkFBa0I7SUFDbEIsV0FBVztBQUNmOztBQUVBO0lBQ0ksV0FBVztJQUNYLFlBQVk7SUFDWix5QkFBeUI7SUFDekIsaUNBQWlDO0lBQ2pDLGtCQUFrQjtJQUNsQixtQkFBbUI7SUFDbkIsa0NBQWtDO0FBQ3RDOztBQUVBO0lBQ0ksS0FBSyx1QkFBdUIsRUFBRTtJQUM5QixPQUFPLHlCQUF5QixFQUFFO0FBQ3RDOztBQUVBO0lBQ0kseUJBQXlCO0FBQzdCOztBQUVBO0lBQ0ksY0FBYztBQUNsQjs7QUFFQTtJQUNJLGdCQUFnQjtJQUNoQixpQkFBaUI7SUFDakIsWUFBWTtJQUNaLGtCQUFrQjtJQUNsQixlQUFlO0lBQ2YsaUNBQWlDO0lBQ2pDLGdCQUFnQjtBQUNwQjs7QUFFQTtJQUNJLHlCQUF5QjtJQUN6QixZQUFZO0FBQ2hCOztBQUVBO0lBQ0kseUJBQXlCO0FBQzdCOztBQUVBO0lBQ0kseUJBQXlCO0lBQ3pCLFlBQVk7QUFDaEI7O0FBRUE7SUFDSSx5QkFBeUI7QUFDN0I7O0FBRUE7SUFDSSxrQkFBa0I7QUFDdEI7O0FBRUE7SUFDSSxjQUFjO0FBQ2xCOztBQUVBO0lBQ0ksY0FBYztBQUNsQjs7QUFFQTtJQUNJLGFBQWE7SUFDYiw4QkFBOEI7SUFDOUIsU0FBUztJQUNULGFBQWE7QUFDakI7O0FBRUE7O0lBRUkseUJBQXlCO0lBQ3pCLGtCQUFrQjtJQUNsQixhQUFhO0FBQ2pCOztBQUVBOztJQUVJLG1CQUFtQjtJQUNuQixjQUFjO0FBQ2xCOztBQUVBO0lBQ0ksY0FBYztBQUNsQjs7QUFFQTtJQUNJLGFBQWE7SUFDYiw4QkFBOEI7SUFDOUIsbUJBQW1CO0lBQ25CLG1CQUFtQjtBQUN2Qjs7QUFFQTtJQUNJLGNBQWM7SUFDZCxpQkFBaUI7QUFDckI7O0FBRUE7SUFDSTtRQUNJLDBCQUEwQjtJQUM5QjtBQUNKIiwic291cmNlc0NvbnRlbnQiOlsiLmludGVydmlldy1jb250YWluZXIge1xyXG4gICAgbWFyZ2luOiAxMDBweCBhdXRvO1xyXG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcclxuICAgIHdpZHRoOiAxMDAlO1xyXG4gICAgbWF4LXdpZHRoOiA4MDBweDtcclxuICAgIGJhY2tncm91bmQtY29sb3I6ICMxNTFlMzM7XHJcbiAgICBib3JkZXItcmFkaXVzOiAxMnB4O1xyXG4gICAgb3ZlcmZsb3c6IGhpZGRlbjtcclxuICAgIGJveC1zaGFkb3c6IDAgMTBweCAzMHB4IHJnYmEoMCwgMCwgMCwgMC4yKTtcclxuICAgIG1hcmdpbi10b3A6IDg1cHg7XHJcbn1cclxuXHJcbi5pbnRlcnZpZXctaGVhZGVyIHtcclxuICAgIGRpc3BsYXk6IGZsZXg7XHJcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xyXG4gICAgcGFkZGluZzogMjBweDtcclxuICAgIGJvcmRlci1ib3R0b206IDFweCBzb2xpZCAjMmMzZTVhO1xyXG59XHJcblxyXG4ucXVlc3Rpb24tbnVtYmVyIHtcclxuICAgIHdpZHRoOiA0OHB4O1xyXG4gICAgaGVpZ2h0OiA0OHB4O1xyXG4gICAgYmFja2dyb3VuZC1jb2xvcjogIzI1NjNlYjtcclxuICAgIGJvcmRlci1yYWRpdXM6IDUwJTtcclxuICAgIGRpc3BsYXk6IGZsZXg7XHJcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcclxuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XHJcbiAgICBmb250LXdlaWdodDogYm9sZDtcclxuICAgIG1hcmdpbi1yaWdodDogMTVweDtcclxufVxyXG5cclxuLmhlYWRlci10ZXh0IGgyIHtcclxuICAgIGZvbnQtc2l6ZTogMThweDtcclxuICAgIG1hcmdpbi1ib3R0b206IDVweDtcclxufVxyXG5cclxuLnF1ZXN0aW9uLXNlY3Rpb24ge1xyXG4gICAgYmFja2dyb3VuZC1jb2xvcjogIzFlMmM0YTtcclxuICAgIG1hcmdpbjogMjBweDtcclxuICAgIHBhZGRpbmc6IDE1cHg7XHJcbiAgICBib3JkZXItcmFkaXVzOiA4cHg7XHJcbiAgICBtaW4taGVpZ2h0OiAzMDBweDtcclxuICAgIGRpc3BsYXk6IGZsZXg7XHJcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcclxuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XHJcbn1cclxuXHJcbi5zdGF0dXMtbWVzc2FnZSB7XHJcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XHJcbiAgICBjb2xvcjogI2ZmZjtcclxufVxyXG5cclxuLmxvYWRpbmctc3Bpbm5lciB7XHJcbiAgICB3aWR0aDogNDBweDtcclxuICAgIGhlaWdodDogNDBweDtcclxuICAgIGJvcmRlcjogNHB4IHNvbGlkICMyNTYzZWI7XHJcbiAgICBib3JkZXItdG9wOiA0cHggc29saWQgdHJhbnNwYXJlbnQ7XHJcbiAgICBib3JkZXItcmFkaXVzOiA1MCU7XHJcbiAgICBtYXJnaW46IDAgYXV0byAyMHB4O1xyXG4gICAgYW5pbWF0aW9uOiBzcGluIDFzIGxpbmVhciBpbmZpbml0ZTtcclxufVxyXG5cclxuQGtleWZyYW1lcyBzcGluIHtcclxuICAgIDAlIHsgdHJhbnNmb3JtOiByb3RhdGUoMGRlZyk7IH1cclxuICAgIDEwMCUgeyB0cmFuc2Zvcm06IHJvdGF0ZSgzNjBkZWcpOyB9XHJcbn1cclxuXHJcbi5lcnJvciB7XHJcbiAgICBib3JkZXI6IDFweCBzb2xpZCAjZWY0NDQ0O1xyXG59XHJcblxyXG4uZXJyb3IgLnN0YXR1cy1tZXNzYWdlIHtcclxuICAgIGNvbG9yOiAjZWY0NDQ0O1xyXG59XHJcblxyXG4ucmV0cnktYnV0dG9uLCAudmlldy1yZXN1bHRzLWJ1dHRvbiB7XHJcbiAgICBtYXJnaW4tdG9wOiAxNXB4O1xyXG4gICAgcGFkZGluZzogOHB4IDIwcHg7XHJcbiAgICBib3JkZXI6IG5vbmU7XHJcbiAgICBib3JkZXItcmFkaXVzOiA0cHg7XHJcbiAgICBjdXJzb3I6IHBvaW50ZXI7XHJcbiAgICB0cmFuc2l0aW9uOiBiYWNrZ3JvdW5kLWNvbG9yIDAuMnM7XHJcbiAgICBmb250LXdlaWdodDogNTAwO1xyXG59XHJcblxyXG4ucmV0cnktYnV0dG9uIHtcclxuICAgIGJhY2tncm91bmQtY29sb3I6ICMyNTYzZWI7XHJcbiAgICBjb2xvcjogd2hpdGU7XHJcbn1cclxuXHJcbi5yZXRyeS1idXR0b246aG92ZXIge1xyXG4gICAgYmFja2dyb3VuZC1jb2xvcjogIzFkNGVkODtcclxufVxyXG5cclxuLnZpZXctcmVzdWx0cy1idXR0b24ge1xyXG4gICAgYmFja2dyb3VuZC1jb2xvcjogIzEwYjk4MTtcclxuICAgIGNvbG9yOiB3aGl0ZTtcclxufVxyXG5cclxuLnZpZXctcmVzdWx0cy1idXR0b246aG92ZXIge1xyXG4gICAgYmFja2dyb3VuZC1jb2xvcjogIzA1OTY2OTtcclxufVxyXG5cclxuLnByb2Nlc3Npbmctc3RhdGUge1xyXG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xyXG59XHJcblxyXG4ucHJvY2Vzc2luZy1zdGF0ZSBwIHtcclxuICAgIG1hcmdpbjogMTBweCAwO1xyXG59XHJcblxyXG4uc3VjY2VzcyB7XHJcbiAgICBjb2xvcjogIzEwYjk4MTtcclxufVxyXG5cclxuLmV2YWx1YXRpb24tY29udGFpbmVyIHtcclxuICAgIGRpc3BsYXk6IGdyaWQ7XHJcbiAgICBncmlkLXRlbXBsYXRlLWNvbHVtbnM6IDFmciAxZnI7XHJcbiAgICBnYXA6IDIwcHg7XHJcbiAgICBwYWRkaW5nOiAyMHB4O1xyXG59XHJcblxyXG4uYW5hbHlzaXMtc3VtbWFyeSxcclxuLmZpbmFsLWRlY2lzaW9uIHtcclxuICAgIGJhY2tncm91bmQtY29sb3I6ICMxZTJjNGE7XHJcbiAgICBib3JkZXItcmFkaXVzOiA4cHg7XHJcbiAgICBwYWRkaW5nOiAyMHB4O1xyXG59XHJcblxyXG4uc3RyZW5ndGhzIGg0LFxyXG4uaW1wcm92ZW1lbnQtYXJlYXMgaDQge1xyXG4gICAgbWFyZ2luLWJvdHRvbTogMTBweDtcclxuICAgIGNvbG9yOiAjMTBiOTgxO1xyXG59XHJcblxyXG4uaW1wcm92ZW1lbnQtYXJlYXMgaDQge1xyXG4gICAgY29sb3I6ICNlYWIzMDg7XHJcbn1cclxuXHJcbi5kZWNpc2lvbi1oZWFkZXIge1xyXG4gICAgZGlzcGxheTogZmxleDtcclxuICAgIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtcclxuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XHJcbiAgICBtYXJnaW4tYm90dG9tOiAxNXB4O1xyXG59XHJcblxyXG4uYWNjZXB0ZWQtYmFkZ2Uge1xyXG4gICAgY29sb3I6ICMxMGI5ODE7XHJcbiAgICBmb250LXdlaWdodDogYm9sZDtcclxufVxyXG5cclxuQG1lZGlhIChtYXgtd2lkdGg6IDc2OHB4KSB7XHJcbiAgICAuZXZhbHVhdGlvbi1jb250YWluZXIge1xyXG4gICAgICAgIGdyaWQtdGVtcGxhdGUtY29sdW1uczogMWZyO1xyXG4gICAgfVxyXG59Il0sInNvdXJjZVJvb3QiOiIifQ== */\"]\n    });\n  }\n  return AiInterviewComponent;\n})();","map":{"version":3,"names":["HttpClientModule","interval","takeWhile","CommonModule","RouterModule","i0","ɵɵelementStart","ɵɵelement","ɵɵtext","ɵɵelementEnd","ɵɵlistener","AiInterviewComponent_div_13_div_5_Template_button_click_3_listener","ɵɵrestoreView","_r1","ctx_r1","ɵɵnextContext","ɵɵresetView","viewResults","AiInterviewComponent_div_13_div_6_Template_button_click_3_listener","_r3","retryProcessing","ɵɵadvance","ɵɵtextInterpolate","errorMessage","ɵɵelementContainerStart","ɵɵtemplate","AiInterviewComponent_div_13_div_2_Template","AiInterviewComponent_div_13_div_3_Template","AiInterviewComponent_div_13_div_4_Template","AiInterviewComponent_div_13_div_5_Template","AiInterviewComponent_div_13_div_6_Template","ɵɵproperty","processingState","AiInterviewComponent_div_14_Template_button_click_3_listener","_r4","monitorCallStatus","AiInterviewComponent","http","dataService","router","statusCheckSubscription","callStatus","maxRetries","retryCount","constructor","ngOnInit","ngOnDestroy","unsubscribe","checkCallStatus","pipe","includes","subscribe","console","log","get","response","status","processInterviewData","error","JSON","stringify","Error","structured_conversation","transcript","results","channels","alternatives","job","evaluateInterview","summary","message","conversation","conversationArray","split","jobData","post","evaluationResults","navigate","ɵɵdirectiveInject","i1","HttpClient","i2","DataService","i3","Router","selectors","decls","vars","consts","template","AiInterviewComponent_Template","rf","ctx","AiInterviewComponent_div_11_Template","AiInterviewComponent_div_12_Template","AiInterviewComponent_div_13_Template","AiInterviewComponent_div_14_Template","ɵɵclassProp","i4","NgSwitch","NgSwitchCase","styles"],"sources":["C:\\Users\\Hardik\\Desktop\\Monday Duplicate\\frontend\\src\\pages\\ai-interview\\ai-interview.component.ts","C:\\Users\\Hardik\\Desktop\\Monday Duplicate\\frontend\\src\\pages\\ai-interview\\ai-interview.component.html"],"sourcesContent":["import { Component, OnInit, OnDestroy } from '@angular/core';\r\nimport { HttpClient, HttpClientModule } from '@angular/common/http';\r\nimport { DataService } from '../../services/data.service';\r\nimport { interval, Subscription } from 'rxjs';\r\nimport { takeWhile } from 'rxjs/operators';\r\nimport { CommonModule } from '@angular/common';\r\nimport { RouterModule, Router } from '@angular/router';\r\n\r\n@Component({\r\n    selector: 'app-ai-interview',\r\n    standalone: true,\r\n    imports: [CommonModule, HttpClientModule, RouterModule],\r\n    templateUrl: './ai-interview.component.html',\r\n    styleUrl: './ai-interview.component.css'\r\n})\r\nexport class AiInterviewComponent implements OnInit, OnDestroy {\r\n    private statusCheckSubscription?: Subscription;\r\n    public callStatus: string = 'initiating';\r\n    public processingState: string = '';\r\n    public errorMessage: string = '';\r\n    private maxRetries = 30; // 5 minutes maximum (10 second intervals)\r\n    private retryCount = 0;\r\n\r\n    constructor(\r\n        private http: HttpClient,\r\n        public dataService: DataService,\r\n        private router: Router\r\n    ) { }\r\n\r\n    ngOnInit(): void {\r\n        this.monitorCallStatus();\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        if (this.statusCheckSubscription) {\r\n            this.statusCheckSubscription.unsubscribe();\r\n        }\r\n    }\r\n\r\n    public monitorCallStatus(): void {\r\n        // Reset state when retrying\r\n        this.callStatus = 'initiating';\r\n        this.errorMessage = '';\r\n        this.retryCount = 0;\r\n        this.processingState = '';\r\n        \r\n        if (this.statusCheckSubscription) {\r\n            this.statusCheckSubscription.unsubscribe();\r\n        }\r\n\r\n        // Immediately check status\r\n        this.checkCallStatus();\r\n        \r\n        this.statusCheckSubscription = interval(5000) // Check every 5 seconds\r\n            .pipe(\r\n                takeWhile(() => {\r\n                    return this.retryCount < this.maxRetries && \r\n                           !['completed', 'failed'].includes(this.callStatus);\r\n                })\r\n            )\r\n            .subscribe(() => {\r\n                this.checkCallStatus();\r\n            });\r\n    }\r\n\r\n    private checkCallStatus(): void {\r\n        console.log('Checking call status...', this.retryCount);\r\n        this.http.get('http://localhost:4000/api/calls/status').subscribe(\r\n            (response: any) => {\r\n                console.log('Status response:', response);\r\n                this.retryCount++;\r\n                \r\n                if (response.status === 'completed') {\r\n                    this.callStatus = 'completed';\r\n                    if (this.statusCheckSubscription) {\r\n                        this.statusCheckSubscription.unsubscribe();\r\n                    }\r\n                    this.processInterviewData();\r\n                } else if (response.status === 'failed') {\r\n                    this.callStatus = 'failed';\r\n                    this.errorMessage = response.error || 'Call failed to connect';\r\n                    if (this.statusCheckSubscription) {\r\n                        this.statusCheckSubscription.unsubscribe();\r\n                    }\r\n                } else if (response.status === 'in_progress') {\r\n                    this.callStatus = 'in_progress';\r\n                } else {\r\n                    if (this.retryCount >= this.maxRetries) {\r\n                        this.callStatus = 'failed';\r\n                        this.errorMessage = 'Call initialization timed out. Please try again.';\r\n                        if (this.statusCheckSubscription) {\r\n                            this.statusCheckSubscription.unsubscribe();\r\n                        }\r\n                    }\r\n                }\r\n            },\r\n            (error) => {\r\n                console.error('Error checking call status:', error);\r\n                this.retryCount++;\r\n                if (this.retryCount >= this.maxRetries) {\r\n                    this.callStatus = 'failed';\r\n                    this.errorMessage = 'Failed to check call status. Please try again.';\r\n                    if (this.statusCheckSubscription) {\r\n                        this.statusCheckSubscription.unsubscribe();\r\n                    }\r\n                }\r\n            }\r\n        );\r\n    }\r\n\r\n    private processInterviewData(): void {\r\n        this.processingState = 'downloading';\r\n        console.log('Downloading call recording...');\r\n        \r\n        this.http.get('http://localhost:4000/api/calls').subscribe(\r\n            (response: any) => {\r\n                console.log(\"✅ Full server response:\", JSON.stringify(response, null, 2));\r\n                \r\n                try {\r\n                    if (!response) {\r\n                        throw new Error('No response data received');\r\n                    }\r\n\r\n                    if (!response.structured_conversation) {\r\n                        throw new Error('Missing structured_conversation in response');\r\n                    }\r\n\r\n                    const transcript = response.structured_conversation?.results?.channels?.[0]?.alternatives?.[0]?.transcript;\r\n                    \r\n                    if (!transcript) {\r\n                        throw new Error('No transcript found in response structure');\r\n                    }\r\n\r\n                    this.processingState = 'transcribing';\r\n                    this.dataService.job = transcript;\r\n                    this.evaluateInterview(this.dataService.job, this.dataService.summary);\r\n                } catch (error: any) {\r\n                    console.error(\"❌ Error processing response:\", error.message);\r\n                    console.error(\"Response structure:\", response);\r\n                    this.processingState = 'error';\r\n                    this.errorMessage = `Failed to process interview data: ${error.message}`;\r\n                }\r\n            },\r\n            (error: any) => {\r\n                console.error(\"❌ Error fetching interview data:\", error);\r\n                this.processingState = 'error';\r\n                this.errorMessage = `Failed to fetch interview data: ${error.message || 'Unknown error'}`;\r\n            }\r\n        );\r\n    }\r\n\r\n    private evaluateInterview(conversation: string, summary: string): void {\r\n        this.processingState = 'evaluating';\r\n        console.log('Evaluating interview...');\r\n        \r\n        const conversationArray = conversation.split('\\n');\r\n        const jobData = {\r\n            conversation: conversationArray,\r\n            summary: summary\r\n        };\r\n\r\n        this.http.post('http://localhost:4000/api/finaleval', jobData).subscribe(\r\n            (response: any) => {\r\n                console.log(\"✅ Final evaluation response:\", response);\r\n                this.processingState = 'done';\r\n                // Store evaluation results in the service for the results page\r\n                this.dataService.evaluationResults = response;\r\n            },\r\n            (error: any) => {\r\n                console.error(\"❌ Error evaluating interview:\", error);\r\n                this.processingState = 'error';\r\n                this.errorMessage = 'Failed to evaluate interview';\r\n            }\r\n        );\r\n    }\r\n\r\n    public retryProcessing(): void {\r\n        this.processInterviewData();\r\n    }\r\n\r\n    public viewResults(): void {\r\n        this.router.navigate(['/interview-results']);\r\n    }\r\n\r\n    // fetchAudio(): void {\r\n    //   fetch('http://localhost:3000/api/audio')\r\n    //     .then(response => response.blob())\r\n    //     .then(blob => {\r\n    //       const url = URL.createObjectURL(blob);\r\n    //       const audio = document.getElementById('player') as HTMLAudioElement;\r\n    //       audio.src = url;\r\n    //     })\r\n    //     .catch(error => {\r\n    //       console.error(\"❌ Error fetching audio:\", error);\r\n    //     });\r\n    // }\r\n}\r\n","<div class=\"interview-container\">\r\n    <div class=\"interview-header\">\r\n        <div class=\"question-number\">1</div>\r\n        <div class=\"header-text\">\r\n            <h2>AI Interview Session</h2>\r\n            <p>1/20 Questions</p>\r\n        </div>\r\n    </div>\r\n    \r\n    <div class=\"question-section\" [class.error]=\"callStatus === 'failed'\">\r\n        <ng-container [ngSwitch]=\"callStatus\">\r\n            <div *ngSwitchCase=\"'initiating'\" class=\"status-message\">\r\n                <div class=\"loading-spinner\"></div>\r\n                <p>Initiating the call. Please wait...</p>\r\n            </div>\r\n            \r\n            <div *ngSwitchCase=\"'in_progress'\" class=\"status-message\">\r\n                <div class=\"loading-spinner\"></div>\r\n                <p>Call in progress...</p>\r\n            </div>\r\n            \r\n            <div *ngSwitchCase=\"'completed'\" class=\"status-message\">\r\n                <ng-container [ngSwitch]=\"processingState\">\r\n                    <div *ngSwitchCase=\"'downloading'\" class=\"processing-state\">\r\n                        <div class=\"loading-spinner\"></div>\r\n                        <p>Downloading call recording...</p>\r\n                    </div>\r\n                    \r\n                    <div *ngSwitchCase=\"'transcribing'\" class=\"processing-state\">\r\n                        <div class=\"loading-spinner\"></div>\r\n                        <p>Transcribing interview...</p>\r\n                    </div>\r\n                    \r\n                    <div *ngSwitchCase=\"'evaluating'\" class=\"processing-state\">\r\n                        <div class=\"loading-spinner\"></div>\r\n                        <p>Evaluating interview responses...</p>\r\n                    </div>\r\n                    \r\n                    <div *ngSwitchCase=\"'done'\" class=\"processing-state success\">\r\n                        <p>✅ Interview processing complete!</p>\r\n                        <button class=\"view-results-button\" (click)=\"viewResults()\">View Results</button>\r\n                    </div>\r\n\r\n                    <div *ngSwitchCase=\"'error'\" class=\"processing-state error\">\r\n                        <p>{{ errorMessage }}</p>\r\n                        <button class=\"retry-button\" (click)=\"retryProcessing()\">Retry Processing</button>\r\n                    </div>\r\n                </ng-container>\r\n            </div>\r\n            \r\n            <div *ngSwitchCase=\"'failed'\" class=\"status-message error\">\r\n                <p>{{ errorMessage }}</p>\r\n                <button class=\"retry-button\" (click)=\"monitorCallStatus()\">Retry</button>\r\n            </div>\r\n        </ng-container>\r\n    </div>\r\n\r\n</div>"],"mappings":"AACA,SAAqBA,gBAAgB,QAAQ,sBAAsB;AAEnE,SAASC,QAAQ,QAAsB,MAAM;AAC7C,SAASC,SAAS,QAAQ,gBAAgB;AAC1C,SAASC,YAAY,QAAQ,iBAAiB;AAC9C,SAASC,YAAY,QAAgB,iBAAiB;;;;;;;;ICK1CC,EAAA,CAAAC,cAAA,aAAyD;IACrDD,EAAA,CAAAE,SAAA,aAAmC;IACnCF,EAAA,CAAAC,cAAA,QAAG;IAAAD,EAAA,CAAAG,MAAA,0CAAmC;IAC1CH,EAD0C,CAAAI,YAAA,EAAI,EACxC;;;;;IAENJ,EAAA,CAAAC,cAAA,aAA0D;IACtDD,EAAA,CAAAE,SAAA,aAAmC;IACnCF,EAAA,CAAAC,cAAA,QAAG;IAAAD,EAAA,CAAAG,MAAA,0BAAmB;IAC1BH,EAD0B,CAAAI,YAAA,EAAI,EACxB;;;;;IAIEJ,EAAA,CAAAC,cAAA,cAA4D;IACxDD,EAAA,CAAAE,SAAA,aAAmC;IACnCF,EAAA,CAAAC,cAAA,QAAG;IAAAD,EAAA,CAAAG,MAAA,oCAA6B;IACpCH,EADoC,CAAAI,YAAA,EAAI,EAClC;;;;;IAENJ,EAAA,CAAAC,cAAA,cAA6D;IACzDD,EAAA,CAAAE,SAAA,aAAmC;IACnCF,EAAA,CAAAC,cAAA,QAAG;IAAAD,EAAA,CAAAG,MAAA,gCAAyB;IAChCH,EADgC,CAAAI,YAAA,EAAI,EAC9B;;;;;IAENJ,EAAA,CAAAC,cAAA,cAA2D;IACvDD,EAAA,CAAAE,SAAA,aAAmC;IACnCF,EAAA,CAAAC,cAAA,QAAG;IAAAD,EAAA,CAAAG,MAAA,wCAAiC;IACxCH,EADwC,CAAAI,YAAA,EAAI,EACtC;;;;;;IAGFJ,EADJ,CAAAC,cAAA,cAA6D,QACtD;IAAAD,EAAA,CAAAG,MAAA,4CAAgC;IAAAH,EAAA,CAAAI,YAAA,EAAI;IACvCJ,EAAA,CAAAC,cAAA,iBAA4D;IAAxBD,EAAA,CAAAK,UAAA,mBAAAC,mEAAA;MAAAN,EAAA,CAAAO,aAAA,CAAAC,GAAA;MAAA,MAAAC,MAAA,GAAAT,EAAA,CAAAU,aAAA;MAAA,OAAAV,EAAA,CAAAW,WAAA,CAASF,MAAA,CAAAG,WAAA,EAAa;IAAA,EAAC;IAACZ,EAAA,CAAAG,MAAA,mBAAY;IAC5EH,EAD4E,CAAAI,YAAA,EAAS,EAC/E;;;;;;IAGFJ,EADJ,CAAAC,cAAA,cAA4D,QACrD;IAAAD,EAAA,CAAAG,MAAA,GAAkB;IAAAH,EAAA,CAAAI,YAAA,EAAI;IACzBJ,EAAA,CAAAC,cAAA,iBAAyD;IAA5BD,EAAA,CAAAK,UAAA,mBAAAQ,mEAAA;MAAAb,EAAA,CAAAO,aAAA,CAAAO,GAAA;MAAA,MAAAL,MAAA,GAAAT,EAAA,CAAAU,aAAA;MAAA,OAAAV,EAAA,CAAAW,WAAA,CAASF,MAAA,CAAAM,eAAA,EAAiB;IAAA,EAAC;IAACf,EAAA,CAAAG,MAAA,uBAAgB;IAC7EH,EAD6E,CAAAI,YAAA,EAAS,EAChF;;;;IAFCJ,EAAA,CAAAgB,SAAA,GAAkB;IAAlBhB,EAAA,CAAAiB,iBAAA,CAAAR,MAAA,CAAAS,YAAA,CAAkB;;;;;IAvBjClB,EAAA,CAAAC,cAAA,aAAwD;IACpDD,EAAA,CAAAmB,uBAAA,MAA2C;IAqBvCnB,EApBA,CAAAoB,UAAA,IAAAC,0CAAA,kBAA4D,IAAAC,0CAAA,kBAKC,IAAAC,0CAAA,kBAKF,IAAAC,0CAAA,kBAKE,IAAAC,0CAAA,kBAKD;;IAKpEzB,EAAA,CAAAI,YAAA,EAAM;;;;IA1BYJ,EAAA,CAAAgB,SAAA,EAA4B;IAA5BhB,EAAA,CAAA0B,UAAA,aAAAjB,MAAA,CAAAkB,eAAA,CAA4B;IAChC3B,EAAA,CAAAgB,SAAA,EAA2B;IAA3BhB,EAAA,CAAA0B,UAAA,+BAA2B;IAK3B1B,EAAA,CAAAgB,SAAA,EAA4B;IAA5BhB,EAAA,CAAA0B,UAAA,gCAA4B;IAK5B1B,EAAA,CAAAgB,SAAA,EAA0B;IAA1BhB,EAAA,CAAA0B,UAAA,8BAA0B;IAK1B1B,EAAA,CAAAgB,SAAA,EAAoB;IAApBhB,EAAA,CAAA0B,UAAA,wBAAoB;IAKpB1B,EAAA,CAAAgB,SAAA,EAAqB;IAArBhB,EAAA,CAAA0B,UAAA,yBAAqB;;;;;;IAQ/B1B,EADJ,CAAAC,cAAA,cAA2D,QACpD;IAAAD,EAAA,CAAAG,MAAA,GAAkB;IAAAH,EAAA,CAAAI,YAAA,EAAI;IACzBJ,EAAA,CAAAC,cAAA,iBAA2D;IAA9BD,EAAA,CAAAK,UAAA,mBAAAuB,6DAAA;MAAA5B,EAAA,CAAAO,aAAA,CAAAsB,GAAA;MAAA,MAAApB,MAAA,GAAAT,EAAA,CAAAU,aAAA;MAAA,OAAAV,EAAA,CAAAW,WAAA,CAASF,MAAA,CAAAqB,iBAAA,EAAmB;IAAA,EAAC;IAAC9B,EAAA,CAAAG,MAAA,YAAK;IACpEH,EADoE,CAAAI,YAAA,EAAS,EACvE;;;;IAFCJ,EAAA,CAAAgB,SAAA,GAAkB;IAAlBhB,EAAA,CAAAiB,iBAAA,CAAAR,MAAA,CAAAS,YAAA,CAAkB;;;ADpCrC,WAAaa,oBAAoB;EAA3B,MAAOA,oBAAoB;IASjBC,IAAA;IACDC,WAAA;IACCC,MAAA;IAVJC,uBAAuB;IACxBC,UAAU,GAAW,YAAY;IACjCT,eAAe,GAAW,EAAE;IAC5BT,YAAY,GAAW,EAAE;IACxBmB,UAAU,GAAG,EAAE,CAAC,CAAC;IACjBC,UAAU,GAAG,CAAC;IAEtBC,YACYP,IAAgB,EACjBC,WAAwB,EACvBC,MAAc;MAFd,KAAAF,IAAI,GAAJA,IAAI;MACL,KAAAC,WAAW,GAAXA,WAAW;MACV,KAAAC,MAAM,GAANA,MAAM;IACd;IAEJM,QAAQA,CAAA;MACJ,IAAI,CAACV,iBAAiB,EAAE;IAC5B;IAEAW,WAAWA,CAAA;MACP,IAAI,IAAI,CAACN,uBAAuB,EAAE;QAC9B,IAAI,CAACA,uBAAuB,CAACO,WAAW,EAAE;MAC9C;IACJ;IAEOZ,iBAAiBA,CAAA;MACpB;MACA,IAAI,CAACM,UAAU,GAAG,YAAY;MAC9B,IAAI,CAAClB,YAAY,GAAG,EAAE;MACtB,IAAI,CAACoB,UAAU,GAAG,CAAC;MACnB,IAAI,CAACX,eAAe,GAAG,EAAE;MAEzB,IAAI,IAAI,CAACQ,uBAAuB,EAAE;QAC9B,IAAI,CAACA,uBAAuB,CAACO,WAAW,EAAE;MAC9C;MAEA;MACA,IAAI,CAACC,eAAe,EAAE;MAEtB,IAAI,CAACR,uBAAuB,GAAGvC,QAAQ,CAAC,IAAI,CAAC,CAAC;MAAA,CACzCgD,IAAI,CACD/C,SAAS,CAAC,MAAK;QACX,OAAO,IAAI,CAACyC,UAAU,GAAG,IAAI,CAACD,UAAU,IACjC,CAAC,CAAC,WAAW,EAAE,QAAQ,CAAC,CAACQ,QAAQ,CAAC,IAAI,CAACT,UAAU,CAAC;MAC7D,CAAC,CAAC,CACL,CACAU,SAAS,CAAC,MAAK;QACZ,IAAI,CAACH,eAAe,EAAE;MAC1B,CAAC,CAAC;IACV;IAEQA,eAAeA,CAAA;MACnBI,OAAO,CAACC,GAAG,CAAC,yBAAyB,EAAE,IAAI,CAACV,UAAU,CAAC;MACvD,IAAI,CAACN,IAAI,CAACiB,GAAG,CAAC,wCAAwC,CAAC,CAACH,SAAS,CAC5DI,QAAa,IAAI;QACdH,OAAO,CAACC,GAAG,CAAC,kBAAkB,EAAEE,QAAQ,CAAC;QACzC,IAAI,CAACZ,UAAU,EAAE;QAEjB,IAAIY,QAAQ,CAACC,MAAM,KAAK,WAAW,EAAE;UACjC,IAAI,CAACf,UAAU,GAAG,WAAW;UAC7B,IAAI,IAAI,CAACD,uBAAuB,EAAE;YAC9B,IAAI,CAACA,uBAAuB,CAACO,WAAW,EAAE;UAC9C;UACA,IAAI,CAACU,oBAAoB,EAAE;QAC/B,CAAC,MAAM,IAAIF,QAAQ,CAACC,MAAM,KAAK,QAAQ,EAAE;UACrC,IAAI,CAACf,UAAU,GAAG,QAAQ;UAC1B,IAAI,CAAClB,YAAY,GAAGgC,QAAQ,CAACG,KAAK,IAAI,wBAAwB;UAC9D,IAAI,IAAI,CAAClB,uBAAuB,EAAE;YAC9B,IAAI,CAACA,uBAAuB,CAACO,WAAW,EAAE;UAC9C;QACJ,CAAC,MAAM,IAAIQ,QAAQ,CAACC,MAAM,KAAK,aAAa,EAAE;UAC1C,IAAI,CAACf,UAAU,GAAG,aAAa;QACnC,CAAC,MAAM;UACH,IAAI,IAAI,CAACE,UAAU,IAAI,IAAI,CAACD,UAAU,EAAE;YACpC,IAAI,CAACD,UAAU,GAAG,QAAQ;YAC1B,IAAI,CAAClB,YAAY,GAAG,kDAAkD;YACtE,IAAI,IAAI,CAACiB,uBAAuB,EAAE;cAC9B,IAAI,CAACA,uBAAuB,CAACO,WAAW,EAAE;YAC9C;UACJ;QACJ;MACJ,CAAC,EACAW,KAAK,IAAI;QACNN,OAAO,CAACM,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;QACnD,IAAI,CAACf,UAAU,EAAE;QACjB,IAAI,IAAI,CAACA,UAAU,IAAI,IAAI,CAACD,UAAU,EAAE;UACpC,IAAI,CAACD,UAAU,GAAG,QAAQ;UAC1B,IAAI,CAAClB,YAAY,GAAG,gDAAgD;UACpE,IAAI,IAAI,CAACiB,uBAAuB,EAAE;YAC9B,IAAI,CAACA,uBAAuB,CAACO,WAAW,EAAE;UAC9C;QACJ;MACJ,CAAC,CACJ;IACL;IAEQU,oBAAoBA,CAAA;MACxB,IAAI,CAACzB,eAAe,GAAG,aAAa;MACpCoB,OAAO,CAACC,GAAG,CAAC,+BAA+B,CAAC;MAE5C,IAAI,CAAChB,IAAI,CAACiB,GAAG,CAAC,iCAAiC,CAAC,CAACH,SAAS,CACrDI,QAAa,IAAI;QACdH,OAAO,CAACC,GAAG,CAAC,yBAAyB,EAAEM,IAAI,CAACC,SAAS,CAACL,QAAQ,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC;QAEzE,IAAI;UACA,IAAI,CAACA,QAAQ,EAAE;YACX,MAAM,IAAIM,KAAK,CAAC,2BAA2B,CAAC;UAChD;UAEA,IAAI,CAACN,QAAQ,CAACO,uBAAuB,EAAE;YACnC,MAAM,IAAID,KAAK,CAAC,6CAA6C,CAAC;UAClE;UAEA,MAAME,UAAU,GAAGR,QAAQ,CAACO,uBAAuB,EAAEE,OAAO,EAAEC,QAAQ,GAAG,CAAC,CAAC,EAAEC,YAAY,GAAG,CAAC,CAAC,EAAEH,UAAU;UAE1G,IAAI,CAACA,UAAU,EAAE;YACb,MAAM,IAAIF,KAAK,CAAC,2CAA2C,CAAC;UAChE;UAEA,IAAI,CAAC7B,eAAe,GAAG,cAAc;UACrC,IAAI,CAACM,WAAW,CAAC6B,GAAG,GAAGJ,UAAU;UACjC,IAAI,CAACK,iBAAiB,CAAC,IAAI,CAAC9B,WAAW,CAAC6B,GAAG,EAAE,IAAI,CAAC7B,WAAW,CAAC+B,OAAO,CAAC;QAC1E,CAAC,CAAC,OAAOX,KAAU,EAAE;UACjBN,OAAO,CAACM,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAACY,OAAO,CAAC;UAC5DlB,OAAO,CAACM,KAAK,CAAC,qBAAqB,EAAEH,QAAQ,CAAC;UAC9C,IAAI,CAACvB,eAAe,GAAG,OAAO;UAC9B,IAAI,CAACT,YAAY,GAAG,qCAAqCmC,KAAK,CAACY,OAAO,EAAE;QAC5E;MACJ,CAAC,EACAZ,KAAU,IAAI;QACXN,OAAO,CAACM,KAAK,CAAC,kCAAkC,EAAEA,KAAK,CAAC;QACxD,IAAI,CAAC1B,eAAe,GAAG,OAAO;QAC9B,IAAI,CAACT,YAAY,GAAG,mCAAmCmC,KAAK,CAACY,OAAO,IAAI,eAAe,EAAE;MAC7F,CAAC,CACJ;IACL;IAEQF,iBAAiBA,CAACG,YAAoB,EAAEF,OAAe;MAC3D,IAAI,CAACrC,eAAe,GAAG,YAAY;MACnCoB,OAAO,CAACC,GAAG,CAAC,yBAAyB,CAAC;MAEtC,MAAMmB,iBAAiB,GAAGD,YAAY,CAACE,KAAK,CAAC,IAAI,CAAC;MAClD,MAAMC,OAAO,GAAG;QACZH,YAAY,EAAEC,iBAAiB;QAC/BH,OAAO,EAAEA;OACZ;MAED,IAAI,CAAChC,IAAI,CAACsC,IAAI,CAAC,qCAAqC,EAAED,OAAO,CAAC,CAACvB,SAAS,CACnEI,QAAa,IAAI;QACdH,OAAO,CAACC,GAAG,CAAC,8BAA8B,EAAEE,QAAQ,CAAC;QACrD,IAAI,CAACvB,eAAe,GAAG,MAAM;QAC7B;QACA,IAAI,CAACM,WAAW,CAACsC,iBAAiB,GAAGrB,QAAQ;MACjD,CAAC,EACAG,KAAU,IAAI;QACXN,OAAO,CAACM,KAAK,CAAC,+BAA+B,EAAEA,KAAK,CAAC;QACrD,IAAI,CAAC1B,eAAe,GAAG,OAAO;QAC9B,IAAI,CAACT,YAAY,GAAG,8BAA8B;MACtD,CAAC,CACJ;IACL;IAEOH,eAAeA,CAAA;MAClB,IAAI,CAACqC,oBAAoB,EAAE;IAC/B;IAEOxC,WAAWA,CAAA;MACd,IAAI,CAACsB,MAAM,CAACsC,QAAQ,CAAC,CAAC,oBAAoB,CAAC,CAAC;IAChD;;uCAvKSzC,oBAAoB,EAAA/B,EAAA,CAAAyE,iBAAA,CAAAC,EAAA,CAAAC,UAAA,GAAA3E,EAAA,CAAAyE,iBAAA,CAAAG,EAAA,CAAAC,WAAA,GAAA7E,EAAA,CAAAyE,iBAAA,CAAAK,EAAA,CAAAC,MAAA;IAAA;;YAApBhD,oBAAoB;MAAAiD,SAAA;MAAAC,KAAA;MAAAC,IAAA;MAAAC,MAAA;MAAAC,QAAA,WAAAC,8BAAAC,EAAA,EAAAC,GAAA;QAAA,IAAAD,EAAA;UCbzBtF,EAFR,CAAAC,cAAA,aAAiC,aACC,aACG;UAAAD,EAAA,CAAAG,MAAA,QAAC;UAAAH,EAAA,CAAAI,YAAA,EAAM;UAEhCJ,EADJ,CAAAC,cAAA,aAAyB,SACjB;UAAAD,EAAA,CAAAG,MAAA,2BAAoB;UAAAH,EAAA,CAAAI,YAAA,EAAK;UAC7BJ,EAAA,CAAAC,cAAA,QAAG;UAAAD,EAAA,CAAAG,MAAA,qBAAc;UAEzBH,EAFyB,CAAAI,YAAA,EAAI,EACnB,EACJ;UAENJ,EAAA,CAAAC,cAAA,aAAsE;UAClED,EAAA,CAAAmB,uBAAA,OAAsC;UAwClCnB,EAvCA,CAAAoB,UAAA,KAAAoE,oCAAA,iBAAyD,KAAAC,oCAAA,iBAKC,KAAAC,oCAAA,iBAKF,KAAAC,oCAAA,iBA6BG;;UAOvE3F,EAFI,CAAAI,YAAA,EAAM,EAEJ;;;UAhD4BJ,EAAA,CAAAgB,SAAA,GAAuC;UAAvChB,EAAA,CAAA4F,WAAA,UAAAL,GAAA,CAAAnD,UAAA,cAAuC;UACnDpC,EAAA,CAAAgB,SAAA,EAAuB;UAAvBhB,EAAA,CAAA0B,UAAA,aAAA6D,GAAA,CAAAnD,UAAA,CAAuB;UAC3BpC,EAAA,CAAAgB,SAAA,EAA0B;UAA1BhB,EAAA,CAAA0B,UAAA,8BAA0B;UAK1B1B,EAAA,CAAAgB,SAAA,EAA2B;UAA3BhB,EAAA,CAAA0B,UAAA,+BAA2B;UAK3B1B,EAAA,CAAAgB,SAAA,EAAyB;UAAzBhB,EAAA,CAAA0B,UAAA,6BAAyB;UA6BzB1B,EAAA,CAAAgB,SAAA,EAAsB;UAAtBhB,EAAA,CAAA0B,UAAA,0BAAsB;;;qBDvC1B5B,YAAY,EAAA+F,EAAA,CAAAC,QAAA,EAAAD,EAAA,CAAAE,YAAA,EAAEpG,gBAAgB,EAAEI,YAAY;MAAAiG,MAAA;IAAA;;SAI7CjE,oBAAoB;AAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}